{"version":3,"file":"static/js/527.156e03f0.chunk.js","mappings":"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","sources":["components/SearchForm/SearchFormStyled.jsx","components/SearchForm/SearchForm.jsx","pages/MoviesPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nconst SearchFormStyled = styled.div`\n  & form {\n    margin-top: 20px;\n\n    & input {\n      height: 21px;\n      width: 300px;\n\n      outline: none;\n      border-radius: 0;\n      border: 1px solid #d7d7d7;\n      border-right: none;\n\n      &:hover,\n      &:focus {\n        border-color: #bababa;\n      }\n    }\n\n    & button {\n      padding: 4px;\n\n      font-weight: 600;\n      outline: none;\n\n      border-radius: 0;\n      border: 1px solid #969696;\n\n      &:hover,\n      &:focus {\n        border-color: #4e4e4e;\n      }\n    }\n  }\n`;\n\nexport default SearchFormStyled;\n","import PropTypes from 'prop-types';\nimport SearchFormStyled from './SearchFormStyled';\n\nconst SearchForm = ({ value, onSubmit, onChange }) => {\n  return (\n    <SearchFormStyled>\n      <form onSubmit={onSubmit}>\n        <input type=\"text\" name=\"search\" value={value} onChange={onChange} />\n        <button type=\"submit\">Search</button>\n      </form>\n    </SearchFormStyled>\n  );\n};\n\nSearchForm.propTypes = {\n  value: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default SearchForm;\n","import React, { useEffect, useRef, useState } from 'react';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport { toast } from 'react-toastify';\nimport { useSearchParams } from 'react-router-dom';\nimport { searchMovies } from 'api/api';\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nconst MoviesPage = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [movies, setMovies] = useState([]);\n  const [finalSearchQuery, setFinalSearchQuery] = useState('');\n\n  const isFirstLoad = useRef(true);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const searchQuery = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (isFirstLoad.current) {\n      isFirstLoad.current = false;\n\n      setFinalSearchQuery(searchQuery);\n\n      return;\n    }\n  }, [searchQuery]);\n\n  useEffect(() => {\n    if (searchQuery === '') {\n      setSearchParams({});\n    }\n  }, [searchQuery, setSearchParams]);\n\n  useEffect(() => {\n    if (finalSearchQuery === '') {\n      setMovies([]);\n\n      return;\n    }\n\n    const fetchMovies = async () => {\n      try {\n        setIsLoading(true);\n\n        const {\n          data: { results: movies },\n        } = await searchMovies(finalSearchQuery);\n\n        setMovies(movies.map(({ id, title }) => ({ id, title })));\n\n        if (movies.length === 0) {\n          toast.warning('No results were found for your search.');\n        }\n      } catch (error) {\n        toast.error(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovies();\n  }, [finalSearchQuery]);\n\n  const onChangeQuery = e => {\n    setSearchParams({ query: e.target.value });\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    setFinalSearchQuery(searchQuery);\n  };\n\n  return (\n    <>\n      <SearchForm\n        value={searchQuery}\n        onChange={onChangeQuery}\n        onSubmit={onSubmit}\n      />\n      {(movies || isLoading) && (\n        <MoviesList movies={movies} isLoading={isLoading} />\n      )}\n    </>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["styled","_templateObject","_taggedTemplateLiteral","_ref","value","onSubmit","onChange","_jsx","SearchFormStyled","children","_jsxs","type","name","_searchParams$get","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","movies","setMovies","_useState5","_useState6","finalSearchQuery","setFinalSearchQuery","isFirstLoad","useRef","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","searchQuery","get","useEffect","current","fetchMovies","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$searchMovies","_movies","wrap","_context","prev","next","searchMovies","sent","data","results","map","_ref2","id","title","length","toast","t0","message","finish","stop","apply","arguments","_Fragment","SearchForm","e","query","target","preventDefault","MoviesList"],"sourceRoot":""}