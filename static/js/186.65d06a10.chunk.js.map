{"version":3,"file":"static/js/186.65d06a10.chunk.js","mappings":"oPAkEA,UA3DgB,WACd,IAAAA,GAAkCC,EAAAA,EAAAA,WAAS,GAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,GAA8BL,EAAAA,EAAAA,YAAUM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAClBG,GAAYC,EAAAA,EAAAA,MAAZD,QA6BR,OA3BAE,EAAAA,EAAAA,YAAU,WACR,IAAIJ,EAAJ,CAIA,IAAMK,EAAY,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAIPC,EAAAA,EAAAA,IAAgBf,GAAS,KAAD,EAAAS,EAAAG,EAAAI,KADxBN,EAAOD,EAAfQ,KAAQP,QAGVX,EACEW,EAAQQ,KAAI,SAAAC,GAAkB,MAAQ,CACpCC,OADmBD,EAANC,OAEbC,QAF4BF,EAAPE,QAGtB,KACDT,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAU,GAAAV,EAAA,SAEFW,EAAAA,GAAAA,MAAYX,EAAAU,GAAME,SAAS,QAEP,OAFOZ,EAAAC,KAAA,GAE3BlB,GAAa,GAAOiB,EAAAa,OAAA,6BAAAb,EAAAc,OAAA,GAAAlB,EAAA,wBAEvB,kBAjBiB,OAAAJ,EAAAuB,MAAA,KAAAC,UAAA,KAmBlBzB,GArBA,CAsBF,GAAG,CAACH,EAASF,IAETJ,GAEAmC,EAAAA,EAAAA,KAAA,MAAAC,SACG,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGZ,KAAI,SAACa,EAAGC,GAAG,OAC1BC,EAAAA,EAAAA,MAAA,MAAAH,SAAA,EACED,EAAAA,EAAAA,KAACK,EAAAA,EAAQ,CAACC,OAAQ,GAAIC,MAAO,MAC7BP,EAAAA,EAAAA,KAACK,EAAAA,EAAQ,CAACC,OAAQ,GAAIC,MAAO,QAFtBJ,EAGJ,MAIDlC,EAAQuC,QAIhBR,EAAAA,EAAAA,KAAA,MAAAC,SACGhC,EAAQoB,KAAI,SAAAoB,GAAA,IAAGlB,EAAMkB,EAANlB,OAAQC,EAAOiB,EAAPjB,QAAO,OAC7BY,EAAAA,EAAAA,MAAA,MAAAH,SAAA,EACEG,EAAAA,EAAAA,MAAA,KAAAH,SAAA,CAAG,WAASV,MACZS,EAAAA,EAAAA,KAAA,KAAAC,SAAIT,MAFGD,EAGJ,OARJS,EAAAA,EAAAA,KAAA,KAAAC,SAAG,4CAad,C","sources":["components/Reviews/Reviews.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getMovieReviews } from 'api/api';\nimport Skeleton from 'react-loading-skeleton';\nimport 'react-loading-skeleton/dist/skeleton.css';\n\nconst Reviews = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [reviews, setReviews] = useState();\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (reviews) {\n      return;\n    }\n\n    const fetchCredits = async () => {\n      try {\n        const {\n          data: { results },\n        } = await getMovieReviews(movieId);\n\n        setReviews(\n          results.map(({ author, content }) => ({\n            author,\n            content,\n          }))\n        );\n      } catch (error) {\n        toast.error(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCredits();\n  }, [movieId, reviews]);\n\n  if (isLoading) {\n    return (\n      <ul>\n        {[1, 2, 3, 4, 5].map((_, key) => (\n          <li key={key}>\n            <Skeleton height={20} width={50} />\n            <Skeleton height={20} width={150} />\n          </li>\n        ))}\n      </ul>\n    );\n  } else if (!reviews.length) {\n    return <p>We don't have any reviews for this movie</p>;\n  } else {\n    return (\n      <ul>\n        {reviews.map(({ author, content }) => (\n          <li key={author}>\n            <b>Author: {author}</b>\n            <p>{content}</p>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n};\n\nexport default Reviews;\n"],"names":["_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","reviews","setReviews","movieId","useParams","useEffect","fetchCredits","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$getMovieReview","results","wrap","_context","prev","next","getMovieReviews","sent","data","map","_ref2","author","content","t0","toast","message","finish","stop","apply","arguments","_jsx","children","_","key","_jsxs","Skeleton","height","width","length","_ref3"],"sourceRoot":""}